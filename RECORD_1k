## 1k

### 0.7747175141242938
  def createModel(self):
    input_text = Input(shape=(1,), dtype='string')
    embedding = Lambda(self.use_embedding, output_shape=(512,))(input_text)
    dense = Dense(512,
                  activation='relu')(embedding)  #kernel_regularizer=l1(0.0001) # 
    dense = Dropout(0.4)(dense)
    pred = Dense(self.n_labels, activation='softmax')(dense)
    self.model = Model(inputs=[input_text], outputs=pred)
    self.model.compile(loss='categorical_crossentropy',
                       optimizer='adam',
                       metrics=['accuracy'])
    print(self.model.summary())

### 0.8347457627118644
  def createModel(self):
    input_text = Input(shape=(1,), dtype='string')
    embedding = Lambda(self.use_embedding, output_shape=(512,))(input_text)
    dense = Dense(512,
                  activation='relu')(embedding)  #kernel_regularizer=l1(0.0001) # 
    dense = Dense(256, activation='tanh')(dense)
    dense = Dropout(0.4)(dense)
    pred = Dense(self.n_labels, activation='softmax')(dense)
    self.model = Model(inputs=[input_text], outputs=pred)
    self.model.compile(loss='categorical_crossentropy',
                       optimizer='adam',
                       metrics=['accuracy'])
    print(self.model.summary())

### 0.806497175141243
  def createModel(self):
    input_text = Input(shape=(1,), dtype='string')
    embedding = Lambda(self.use_embedding, output_shape=(512,))(input_text)
    dense = Dense(512, activation='relu')(
        embedding)  #kernel_regularizer=l1(0.0001) #
    dense = Dense(256, activation='tanh')(dense)
    dense = Dense(256, activation='tanh')(dense)
    dense = Dropout(0.4)(dense)
    pred = Dense(self.n_labels, activation='softmax')(dense)
    self.model = Model(inputs=[input_text], outputs=pred)
    self.model.compile(loss='categorical_crossentropy',
                       optimizer='adam',
                       metrics=['accuracy'])
    print(self.model.summary())    

### 0.8149717514124294
  def createModel(self):
    input_text = Input(shape=(1,), dtype='string')
    embedding = Lambda(self.use_embedding, output_shape=(512,))(input_text)
    dense = Dense(512, activation='relu')(
        embedding)  #kernel_regularizer=l1(0.0001) #
    dense = Dense(512, activation='tanh')(dense)
    dense = Dense(256, activation='tanh')(dense)
    dense = Dropout(0.4)(dense)
    pred = Dense(self.n_labels, activation='softmax')(dense)
    self.model = Model(inputs=[input_text], outputs=pred)
    self.model.compile(loss='categorical_crossentropy',
                       optimizer='adam',
                       metrics=['accuracy'])
    print(self.model.summary())

### 0.6659604519774012
  def createModel(self):
    input_text = Input(shape=(1,), dtype='string')
    embedding = Lambda(self.use_embedding, output_shape=(512,))(input_text)
    dense = Dense(512, activation='relu')(
        embedding)  #kernel_regularizer=l1(0.0001) #
    dense = Dense(512, activation='tanh')(dense)
    dense = Dense(256, activation='relu')(dense)
    dense = Dropout(0.4)(dense)
    pred = Dense(self.n_labels, activation='softmax')(dense)
    self.model = Model(inputs=[input_text], outputs=pred)
    self.model.compile(loss='categorical_crossentropy',
                       optimizer='adam',
                       metrics=['accuracy'])
    print(self.model.summary())

# 0.6949152542372882
  def createModel(self):
    input_text = Input(shape=(1,), dtype='string')
    embedding = Lambda(self.use_embedding, output_shape=(512,))(input_text)
    dense = Dense(512, activation='relu')(
        embedding)  #kernel_regularizer=l1(0.0001) #
    dense = Dense(512, activation='tanh')(dense)
    dense = Dense(512, activation='relu')(dense)
    dense = Dropout(0.4)(dense)
    pred = Dense(self.n_labels, activation='softmax')(dense)
    self.model = Model(inputs=[input_text], outputs=pred)
    self.model.compile(loss='categorical_crossentropy',
                       optimizer='adam',
                       metrics=['accuracy'])
    print(self.model.summary())

### 0.692090395480226
  def createModel(self):
    input_text = Input(shape=(1,), dtype='string')
    embedding = Lambda(self.use_embedding, output_shape=(512,))(input_text)
    dense = Dense(512, activation='relu')(
        embedding)  #kernel_regularizer=l1(0.0001) #
    dense = Dense(512, activation='tanh')(dense)
    dense = Dense(512, activation='relu', kernel_regularizer=l1(0.0001))(dense)
    dense = Dropout(0.4)(dense)
    pred = Dense(self.n_labels, activation='softmax')(dense)
    self.model = Model(inputs=[input_text], outputs=pred)
    self.model.compile(loss='categorical_crossentropy',
                       optimizer='adam',
                       metrics=['accuracy'])
    print(self.model.summary())

### 0.8206214689265536
 def createModel(self):
    input_text = Input(shape=(1,), dtype='string')
    embedding = Lambda(self.use_embedding, output_shape=(512,))(input_text)
    dense = Dense(512, activation='relu')(
        embedding)  #kernel_regularizer=l1(0.0001) #
    dense = Dense(512, activation='tanh')(dense)
    dense = Dense(512, activation='tanh')(dense)
    dense = Dense(512, activation='tanh')(dense)
    dense = Dropout(0.4)(dense)
    pred = Dense(self.n_labels, activation='softmax')(dense)
    self.model = Model(inputs=[input_text], outputs=pred)
    self.model.compile(loss='categorical_crossentropy',
                       optimizer='adam',
                       metrics=['accuracy'])
    print(self.model.summary())

### 0.8135593220338984
  def createModel(self):
    input_text = Input(shape=(1,), dtype='string')
    embedding = Lambda(self.use_embedding, output_shape=(512,))(input_text)
    dense = Dense(512, activation='relu')(
        embedding)  #kernel_regularizer=l1(0.0001) #
    dense = Dense(512, activation='tanh')(dense)
    dense = Dense(512, activation='relu')(dense)
    dense = Dense(512, activation='tanh')(dense)
    dense = Dropout(0.4)(dense)
    pred = Dense(self.n_labels, activation='softmax')(dense)
    self.model = Model(inputs=[input_text], outputs=pred)
    self.model.compile(loss='categorical_crossentropy',
                       optimizer='adam',
                       metrics=['accuracy'])
    print(self.model.summary())

### 0.8029661016949152
  def createModel(self):
    input_text = Input(shape=(1,), dtype='string')
    embedding = Lambda(self.use_embedding, output_shape=(512,))(input_text)
    dense = Dense(512, activation='relu')(
        embedding)  #kernel_regularizer=l1(0.0001) #
    dense = Dense(512, activation='tanh')(dense)
    dense = Dense(512, activation='tanh')(dense)
    dense = Dense(512, activation='tanh')(dense)
    dense = Dense(512, activation='tanh')(dense)
    dense = Dropout(0.4)(dense)
    pred = Dense(self.n_labels, activation='softmax')(dense)
    self.model = Model(inputs=[input_text], outputs=pred)
    self.model.compile(loss='categorical_crossentropy',
                       optimizer='adam',
                       metrics=['accuracy'])
    print(self.model.summary())  

### 0.7464689265536724
def createModel(self):
    input_text = Input(shape=(1,), dtype='string')
    embedding = Lambda(self.use_embedding, output_shape=(512,))(input_text)
    dense = Dense(512, activation='relu')(
        embedding)  #kernel_regularizer=l1(0.0001) #
    dense = Dense(512, activation='tanh')(dense)
    dense = Dense(512, activation='tanh')(dense)
    dense = BatchNormalization()(dense)
    dense = Dense(512, activation='tanh')(dense)
    dense = Dense(512, activation='tanh')(dense)
    dense = Dropout(0.4)(dense)
    pred = Dense(self.n_labels, activation='softmax')(dense)
    self.model = Model(inputs=[input_text], outputs=pred)
    self.model.compile(loss='categorical_crossentropy',
                       optimizer='adam',
                       metrics=['accuracy'])
    print(self.model.summary())

### 0.759180790960452
def lowerCase(self):
    self.train_sents = np.array((ts.lower() for ts in self.train_sents))
    self.valid_sents = np.array((vs.lower() for vs in self.valid_sents))  

def createModel(self):
    input_text = Input(shape=(1,), dtype='string')
    embedding = Lambda(self.use_embedding, output_shape=(512,))(input_text)
    dense = Dense(512, activation='relu')(
        embedding)  #kernel_regularizer=l1(0.0001) #
    dense = Dense(512, activation='tanh')(dense)
    dense = Dense(512, activation='tanh')(dense)
    dense = BatchNormalization()(dense)
    dense = Dense(512, activation='tanh')(dense)
    dense = Dense(512, activation='tanh')(dense)
    dense = Dropout(0.4)(dense)
    pred = Dense(self.n_labels, activation='softmax')(dense)
    self.model = Model(inputs=[input_text], outputs=pred)
    self.model.compile(loss='categorical_crossentropy',
                       optimizer='adam',
                       metrics=['accuracy'])
    print(self.model.summary()) 

### 0.7994350282485876
def createModel(self):
    input_text = Input(shape=(1,), dtype='string')
    embedding = Lambda(self.use_embedding, output_shape=(512,))(input_text)
    dense = Dense(512, activation='relu')(
        embedding)  #kernel_regularizer=l1(0.0001) #
    dense = Dense(512, activation='tanh')(dense)
    dense = Dense(512, activation='relu')(dense)
    dense = BatchNormalization()(dense)
    dense = Dense(512, activation='tanh')(dense)
    dense = Dense(512, activation='tanh')(dense)
    dense = Dropout(0.4)(dense)
    pred = Dense(self.n_labels, activation='softmax')(dense)
    self.model = Model(inputs=[input_text], outputs=pred)
    self.model.compile(loss='categorical_crossentropy',
                       optimizer='adam',
                       metrics=['accuracy'])
    print(self.model.summary())  

### 0.5042372881355932
def createModel(self):
    input_text = Input(shape=(1,), dtype='string')
    embedding = Lambda(self.use_embedding, output_shape=(512,))(input_text)
    dense = Dense(512, activation='relu')(
        embedding)  #kernel_regularizer=l1(0.0001) #
    dense = Dense(512, activation='tanh')(dense)
    dense = Dense(512, activation='relu')(dense)
    dense = BatchNormalization()(dense)
    dense = Dense(512, activation='tanh')(dense)
    dense = Dense(512, activation='relu')(dense)
    dense = BatchNormalization()(dense)
    dense = Dropout(0.4)(dense)
    pred = Dense(self.n_labels, activation='softmax')(dense)
    self.model = Model(inputs=[input_text], outputs=pred)
    self.model.compile(loss='categorical_crossentropy',
                       optimizer='adam',
                       metrics=['accuracy'])
    print(self.model.summary())            

### 0.692090395480226
def createModel(self):
    input_text = Input(shape=(1,), dtype='string')
    embedding = Lambda(self.use_embedding, output_shape=(512,))(input_text)
    dense = Dense(512, activation='relu')(
        embedding)  #kernel_regularizer=l1(0.0001) #
    dense = Dense(512, activation='tanh')(dense)
    dense = Dense(512, activation='relu')(dense)
    dense = BatchNormalization()(dense)
    dense = Dense(512, activation='tanh')(dense)
    dense = BatchNormalization()(dense)
    dense = Dense(512, activation='relu')(dense)
    dense = Dropout(0.4)(dense)
    pred = Dense(self.n_labels, activation='softmax')(dense)
    self.model = Model(inputs=[input_text], outputs=pred)
    self.model.compile(loss='categorical_crossentropy',
                       optimizer='adam',
                       metrics=['accuracy'])
    print(self.model.summary())   

### 0.692090395480226
def createModel(self):
    input_text = Input(shape=(1,), dtype='string')
    embedding = Lambda(self.use_embedding, output_shape=(512,))(input_text)
    dense = Dense(512, activation='relu')(
        embedding)  #kernel_regularizer=l1(0.0001) #
    dense = Dense(512, activation='tanh')(dense)
    dense = Dense(512, activation='relu')(dense)
    dense = BatchNormalization()(dense)
    dense = Dense(512, activation='tanh')(dense)
    dense = BatchNormalization()(dense)
    dense = Dense(512, activation='relu')(dense)
    dense = Dropout(0.1)(dense)
    pred = Dense(self.n_labels, activation='softmax')(dense)
    self.model = Model(inputs=[input_text], outputs=pred)
    self.model.compile(loss='categorical_crossentropy',
                       optimizer='adam',
                       metrics=['accuracy'])
    print(self.model.summary())   